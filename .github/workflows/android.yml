name: Android Stage Build & Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build Signed APK
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    - name: Decode keystore file
      id: decode_keystore
      uses: timheuer/base64-to-file@v1.2
      with:
        fileName: 'qa_key.jks'
        fileDir: './app/'
        encodedString: ${{ secrets.STAGING_ENCRYPTED_KEY_STORE }}
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew app:bundleDemoStaging
      env:
          STAGING_ALIAS: ${{ secrets.STAGING_ALIAS }}
          STAGING_PASSWORD: ${{ secrets.STAGING_PASSWORD }}
    - name: Check for file
      id: file_check
      run: |
        pwd
        if find . -type f -name "*.aab"; then
        echo "check_result=true" >> $GITHUB_OUTPUT
        else
        echo "check_result=false" >> $GITHUB_OUTPUT
        fi
    - name: Decode credential file
      id: decode_credentials
      uses: timheuer/base64-to-file@v1.2
      if: steps.file_check.outputs.check_result == 'true'
      with:
        fileName: 'credentials.json'
        fileDir: './app/'
        encodedString: ${{ secrets.STAGING_CREDENTIAL_FILE_CONTENT }}
    - name: upload to Firebase App Distribution
      id: distrib_outputs
      uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
      with:
        appId: ${{secrets.STAGING_APP_ID}}
        serviceCredentialsFile: ./app/credentials.json
        file: ./app/build/outputs/bundle/demoStaging/app-demo-staging.aab
        debug: true
    - name: Assert outputs of previous step are not empty
      run: |
        echo "${{ steps.distrib_outputs.outputs.FIREBASE_CONSOLE_URI }}"
        if [[ -z "${{ steps.distrib_outputs.outputs.FIREBASE_CONSOLE_URI }}" ]]; then
          echo "Console URI is empty" >&2
          exit 1
        fi
        echo "${{ steps.distrib_outputs.outputs.TESTING_URI }}"
        if [[ -z "${{ steps.distrib_outputs.outputs.TESTING_URI }}" ]]; then
          echo "Testing URI is empty" >&2
          exit 1
        fi
        echo "${{ steps.distrib_outputs.outputs.BINARY_DOWNLOAD_URI }}"
        if [[ -z "${{ steps.distrib_outputs.outputs.BINARY_DOWNLOAD_URI }}" ]]; then
          echo "Binary download URI is empty" >&2
          exit 1
        fi
